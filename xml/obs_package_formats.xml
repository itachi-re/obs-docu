<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha-obs-package-formats"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Supported Build Recipes and Package Formats</title>
 <info/>
 <remark>toms 2017-08-18: list advantages/disadvantages/benefits for each format</remark>
 <remark>toms 2017-08-18: comparison of these formats?</remark>

 <sect1>
  <title>About Formats</title>
  <remark>toms 2017-08-18: classification between distribution-dependand and
   independant</remark>
  <para> &obsa; differentiates between the format of the build recipes and the
   format of the installed packages. For example, the spec recipe format is
   used to build RPM packages by calling <command>rpmbuild</command>. </para>
  <para> In most cases, the build result format is the same as the package
   format used for setting up the build environment, but sometimes the format
   is different. An example is the &kiwi; build recipe format, which can build
   <!--products and--> ISOs, but uses RPM packages to set up the build process.
  </para>
  <para> OBS currently supports the following build recipe formats and packages:
  </para>
  <itemizedlist>
   <title>Supported Package Formats</title>
   <listitem>
    <para>RPM package format, used for all RPM-based distributions like
     &opensuse;, &sle;, Fedora, and others.</para>
   </listitem>
   <listitem>
    <para>DEB package format, used in Debian, Ubuntu, and derived
     distributions</para>
   </listitem>
   <listitem>
    <para>Arch package format, used by Arch Linux</para>
   </listitem>
  </itemizedlist>

  <itemizedlist>
   <title>Supported Build Recipe Formats</title>
   <listitem>
    <para>Spec format for RPM packages</para>
   </listitem>
   <listitem>
    <para>Dsc format for DEB packages</para>
   </listitem>
   <listitem>
    <para>&kiwi; format, both product and appliances</para>
   </listitem>
   <listitem>
    <para>preinstallimage</para>
   </listitem>
   <listitem>
    <para>SimpleImage format</para>
   </listitem>
   <listitem>
    <para>Mkosi format to build images</para>
   </listitem>
  </itemizedlist>

  <para> If no build recipe format and binary format are specified in the project
   configuration, &obsa; tries to deduce them from the preinstall list, which
   includes the name of the used package manager.
   This means that you need to manually configure the
    <literal>kiwi</literal> build recipe, as an RPM package format will select
    <literal>spec</literal> builds as default. This configuration is done by
   adding a <literal>Type</literal> line to the project configuration. </para>
 </sect1>

 <sect1>
  <title>RPM: Spec</title>
  <para>
   RPM (RPM Package Manager) is used on &opensuse;, &sle;, Red Hat, Fedora,
   and other distributions. For building RPMs you need:
  </para>
  <variablelist>
   <varlistentry>
    <term><filename class="extension">.spec</filename></term>
    <listitem>
     <para>
      the <firstterm>spec file</firstterm> for each package containing
      metadata and build instructions. &obsa; parses the spec file's
      BuildRequires lines to get a list of package dependencies. OBS uses this
      information to both build the packages in the correct order and also for
      setting up the build environment. The parser understands most of RPMs
      macro handling, so it is possible to use architecture specific
      BuildRequires, conditional builds and other advanced RPM features.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename class="extension">.changes</filename></term>
    <listitem>
     <para>the file which contains the changelog.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1>
  <title>Debian: Dsc</title>
  <para>
   DEB packages are used on all Debian or Ubuntu based distributions.
   For building <filename class="extension">.deb</filename> files, you need:
  </para>
  <variablelist>
   <varlistentry>
    <term><filename>debian.control</filename></term>
    <listitem>
     <para>The file contains the meta information for the package like the
      build dependencies or some description. </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>debian.rules</filename></term>
    <listitem>
     <para>This file describes the build section of the DEB building process.
      There are the configure and make compile commands including other DEB
      building sections.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename><replaceable>PACKAGE</replaceable>.dsc</filename></term>
    <listitem>
     <para>In this file you describe the package names of each subpackage and
      their dependency level. Unlike RPM, the release numbers are not increased
      automatically during build unless the keyword
      <varname>DEBTRANSFORM-RELEASE</varname> is added to the file.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1>
  <title>Arch: pkg</title>
  <para>
   &obs.arch; files is used on Arch Linux and its derivatives. For building
   &obs.arch; you need:
  </para>
  <variablelist>
   <varlistentry>
    <term><filename>PKGBUILD</filename></term>
    <listitem>
     <para>
      It contains the build description and the source tarball. The file
       <filename>PKGBUILD</filename> does not have macros like
       <literal>%{buildroot}</literal>. It contains variables, for example,
        <literal>makedepends=(<replaceable>PACKAGE1</replaceable>,
        <replaceable>PACKAGE2</replaceable>)</literal>. These variables are
      parsed by OBS and uses them as dependencies. On Arch Linux you typically
      build packages without subpackage. They are no <package>*-dev</package>
      or <package>*-devel</package> packages.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 condition="tbd">
  <title>Snap</title>
  <para/>
  <remark>TBD</remark>
  <remark>toms 2017-08-18: see obs_build_containers.xml</remark>
 </sect1>

<!--
 <sect1>
  <title>Livebuild</title>
  <para/>
  <remark>TBD</remark>
 </sect1>
-->

 <sect1 xml:id="kiwi-appliance">
  <title>&kiwi; Appliance</title>
  <para>
   <link xlink:href="https://github.com/OSInside/kiwi">KIWI</link> is an OS
   appliance builder that builds images for various formats, starting from
   hardware images, virtualization systems like QEMU/KVM, Xen and VMware,
   and more. It supports a wide range of architectures, which are x86, x86_64,
   s390 and ppc. </para>
  <para> For building an image in &kiwi; you need:</para>

  <variablelist>
   <varlistentry>
    <term><filename>my_image.kiwi</filename></term>
    <listitem>
     <para>
      Contains the image configuration in XML format. Full XML schema
      documentation can be found <link
      xlink:href="https://osinside.github.io/kiwi/image_description.html"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>config.sh</filename> (optional)</term>
    <listitem>
     <para>configuration script that runs
     at the end of the installation, but before package scripts have run.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>root/</filename></term>
    <listitem>
     <para>
      directory that contains files that will be applied to the built
      image after package installation. This can also be an archived and
      compressed directory, usually named <filename>root.tar.gz</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <para> &obsa; only accepts &kiwi; configuration files with a <filename
    class="extension">.kiwi</filename> suffix. Other naming schemes &kiwi;
    supports like <filename>config.xml</filename>, are ignored in &obsa;.
   </para>
  </note>
  <para> For more information about building images with KIWI, see the <link
   xlink:href="https://osinside.github.io/kiwi/building_images.html"/>.
  </para>
 </sect1>

 <sect1>
  <title>&obs.si;</title>
  <para>
   <remark>toms 2017-08-18: FIXME This should be explained better</remark>
   This format can be used to get simple rootfs tarball or squashfs
   image. It does not contain a bootloader or a kernel.
   For advanced features, use &kiwi;.
   Use &obs.si; for simple rootfs tarball/squashfs image of any
   distribution that is supported by &obsa; but does not have anything
   fancier than that. </para>

  <para>For building a &obs.si;, you need a <filename>simpleimage</filename>
   file. Be aware of the following points:
  </para>
  <itemizedlist>
   <listitem>
    <para>&obs.si; uses a similar syntax than a spec file.</para>
   </listitem>
   <listitem>
    <para>
     Supported tags include <literal>Name</literal>,
     <literal>Version</literal>, <literal>BuildRequires</literal>, and
    <literal>#!BuildIgnore</literal>.
    </para>
   </listitem>
   <listitem>
    <para>Additional customization with <literal>%build</literal> phase
     is supported.</para>
   </listitem>
   <listitem>
    <para>RPM macros are not supported, but <varname>$SRCDIR</varname> shell
     variable is available.</para>
   </listitem>
  </itemizedlist>
  <remark>toms 2017-08-18: what's the filename for &obs.si;, simpleimage?</remark>
  <example>
   <title>&obs.si; File (<filename>simpleimage</filename>)</title>
   <screen>Name:           example-image
Version:        1.0
BuildRequire:   emacs
#!BuildIgnore:  gcc-c++

%build
# Set root password
passwd &lt;&lt; EOF
opensuse
opensuse
EOF

# Enable ssh
systemctl enable sshd</screen>
  </example>
 </sect1>

 <sect1>
  <title>&obs.ai;</title>
  <remark>toms 2017-08-18: TODO What is it and what is needed</remark>
 </sect1>

 <sect1 xml:id="sec-pkgfmt-flatpak">
  <title>&flatpak;</title>
  <para>
  The <link xlink:href="https://flatpak.org/">Flatpak</link> format can be used
  to generate desktop apps for Linux.
  </para>
  <para>
  For building an installable &flatpak; bundle, you need a
  <filename>flatpak.yaml</filename> manifest file.
  See
  <link xlink:href="https://docs.flatpak.org/en/latest/manifests.html">&flatpak; Manifests</link>
  for the full documentation.
  </para>
  <para>
  Also some project and package configuration is necessary.
  </para>
  <itemizedlist>
  <title>Quick Start</title>
  <listitem><para>
  To avoid having to enter the configuration manually, you can:
  </para></listitem>
  <listitem><para>
  go to the
  <link xlink:href="https://build.opensuse.org/image_templates">Image Templates</link>
  and create a project from there, or
  </para></listitem>
  <listitem><para>
  branch the
  <link xlink:href="https://build.opensuse.org/package/show/OBS:Flatpak:Templates/FlatpakTemplate">Template Package</link>
  </para></listitem>
  </itemizedlist>
  <itemizedlist>
  <title>Manifest Format</title>
  <listitem><para>
  Input format is <link xlink:href="https://yaml.org">YAML</link>. Although
  flatpak also accepts JSON, we are using YAML in &obs;, because we have
  a special additional field in form of a YAML comment.
  </para></listitem>
  <listitem><para>
  You can use JSON, as it is a subset of YAML. But be aware that flatpak
  accepts non-standard <literal>//</literal> comments, while &obs; does not.
  </para></listitem>
  <listitem><para>
  <literal>#!BuildVersion</literal> - Use this field to specify the version
  of your app so the <literal>.flatpak</literal> file will be versioned.
  &flatpak; manifests do not have a version field.
  </para></listitem>
  <listitem><para>
  To learn YAML, have a look at this <link xlink:href="https://www.yaml.info/">YAML Tutorial</link>.
  </para></listitem>
  </itemizedlist>
  <para>
  The base images for Freedesktop, GNOME, KDE are maintained in the
  <link xlink:href="https://build.opensuse.org/project/show/OBS:Flatpak">OBS:Flatpak</link>
  repository in form of rpm packages. They are generated by installing the
  images from <link xlink:href="https://flathub.org/">Flathub</link>
  and packing the directories into a tar archive.
  </para>
  <example>
   <title>&flatpak; Manifest (<filename>flatpak.yaml</filename>)</title>
   <screen>
######################################################
# Flatpak manifest example for Open Build Service
# https://docs.flatpak.org/en/latest/manifests.html
# Input should be YAML, even though the file can have
# a .json suffix (JSON is a subset of YAML).
# Don't use '//' comments!
######################################################

# Special OBS field because flatpak does not have a version field
# Default will be '0' if the field is missing.
#!BuildVersion: 3.14.15
---
app-id: org.gnome.Mahjongg
runtime: org.gnome.Platform
sdk: org.gnome.Sdk
runtime-version: '3.36'
command: gnome-mahjongg

finish-args:
  - --share=ipc
  - --socket=fallback-x11
  - --socket=wayland
  - --device=dri
  - --metadata=X-DConf=migrate-path=/org/gnome/Mahjongg/

cleanup:
  - "/share/man"

modules:
- name: gnome-mahjongg
  buildsystem: meson
  sources:
  - type: archive

    # Source archives should be put into the OBS package, but you can
    # keep the original URL from where it was downloaded here.
    url: https://download.gnome.org/sources/gnome-mahjongg/3.36/gnome-mahjongg-3.36.2.tar.xz

    # You can also just specify a simple filename
    # url: gnome-mahjongg-3.36.2.tar.xz

    # flatpak-builder will do a checksum
    sha256: 'd2e8f1563ee03d112a17042c4e99971295b36f3ba795c7d905d636cc94b8ae97'
   </screen>
  </example>
  <example>
   <title>&flatpak; Project config (<filename>prjconf</filename>)</title>
   <screen>
Type: flatpak
Support: kmod-compat kernel-default perl-YAML-LibYAML
   </screen>
  </example>
  <example>
   <title>&flatpak; Project meta example</title>
   <screen>
&lt;project name="Your:Project:Name"&gt;
  &lt;title&gt;Title&lt;/title&gt;
  &lt;description&gt;Description&lt;/description&gt;
  &lt;repository name="openSUSE_Leap_15.2"&gt;
    &lt;path project="OBS:Flatpak" repository="openSUSE_Leap_15.2"/&gt;
    &lt;arch&gt;x86_64&lt;/arch&gt;
  &lt;/repository&gt;
  &lt;repository name="openSUSE_Leap_15.1"&gt;
    &lt;path project="OBS:Flatpak" repository="openSUSE_Leap_15.1"/&gt;
    &lt;arch&gt;x86_64&lt;/arch&gt;
  &lt;/repository&gt;
&lt;/project&gt;
   </screen>
  </example>
 </sect1>

 <sect1 xml:id="sec-pkgfmt-mkosi">
  <title>mkosi</title>
  <para>
   <link xlink:href="https://github.com/systemd/mkosi/">Mkosi</link> allows
   building images for rpm, arch, deb and gentoo based distributions, on any
   architecture. Images built with mkosi by default will follow the
   <link xlink:href="https://systemd.io/DISCOVERABLE_PARTITIONS/">Discoverable Partitions Specification</link>
   and will be bootable on baremetal (UEFI), virtual machines (UEFI),
   containers via
   <link xlink:href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html">systemd-nspawn,</link>
   or as
   <link xlink:href="https://systemd.io/PORTABLE_SERVICES/">Portable Services</link>
   in systemd. GRUB2 is also supported. It can also be used to build
   <link xlink:href="https://uapi-group.org/specifications/specs/unified_kernel_image/">Unified Kernel Images (UKIs)</link>
   (and addons) and <link xlink:href="https://uapi-group.org/specifications/specs/extension_image/">Sysexts</link>.</para>
  <para> In order to build an image in mkosi you need at least a
   <filename>mkosi.conf</filename> recipe file. This file contains the
   image configuration in INI format. All available options can be found in the
   <link xlink:href="https://github.com/systemd/mkosi/blob/main/mkosi.md">Mkosi documentation</link>.
  </para>
  <para>
   With a recent enough version of mkosi (at least v26) it is possible to sign
   images on OBS. Simply add <literal>Include=mkosi-obs</literal> and
   <literal># needssslcertforbuild</literal> to the main <literal>mkosi.conf</literal>
   configuration file, and UKIs, bootloaders in the ESP, and dm-verity images
   will be signed with the project's certificate. If the sources have a
   <literal>mkosi.uefi.db/</literal> and/or <literal>mkosi.uefi.KEK/</literal>
   subdirectory, any x509 PEM certificate contained therein will be set up for
   self-enrolling on first boot in UEFI images for the respective key database.
  </para>

  <note>
   <para>Ensure to set <literal>Type: mkosi</literal> in the repository's
   <literal>prjconf</literal> where the image builds are enabled on &obsa;.
   <literal>Repotype: checksumsfile:rawsig staticlinks</literal> can also
   be set to be compatible with <literal>systemd-sysupdate</literal>.
   </para>
  </note>

  <sect2 xml:id="sec-pkgfmt-mkosi-uki">
    <title>UKI from inline config</title>
    <example>
    <title>mkosi minimal build recipe (<filename>mkosi.conf</filename>) for a
    Debian UKI</title>
    <screen>
  # needssslcertforbuild

  [Distribution]
  Distribution=debian

  [Include]
  Include=mkosi-initrd
          mkosi-obs

  [Output]
  Format=uki
  ManifestFormat=json
  ImageId=%d-%r
  Output=%d-%r_%v_%a
  SplitArtifacts=pcrs

  [Content]
  Packages=
          systemd
          udev
          p11-kit
          lvm2
          util-linux
          kmod
          dmsetup
          dosfstools
          btrfs-progs
          e2fsprogs
          systemd-cryptsetup
          systemd-repart
          libcryptsetup12
          libfido2-1
          libtss2-esys-3.0.2-0t64
          libtss2-mu-4.0.1-0t64
          libtss2-rc0
          libtss2-tcti-device0
          libseccomp2
          linux-image-generic
          plymouth-themes
          kbd
          desktop-base
          amd64-microcode
          intel-microcode
          systemd-boot-efi

  RemoveFiles=
          /usr/lib/systemd/boot
          /usr/lib/firmware
          /boot
          /efi
          /vmlinuz
          /vmlinuz.old
          /initrd.img
          /initrd.img.old
          /etc/xdg/
          /usr/share/bug/
          /usr/share/doc/
          /usr/share/doc-base/
          /usr/share/man/
          /usr/share/common-licenses/
          /usr/share/bash-completion/
          /usr/share/reportbug/
          /usr/share/zsh/
          /usr/share/initramfs-tools/
          /usr/share/lintian/
          /usr/share/desktop-base/
          /usr/share/wallpapers/
          /usr/share/plasma/
          /usr/share/gnome-background-properties/
          /usr/share/pixmaps/
          /usr/share/icons/
          /usr/share/images/
          /var/cache
          /var/log
          /var/lib/systemd/deb-systemd-helper-enabled

  KernelModulesExclude=.*
  KernelModulesInclude=defaultstack
                      /drivers/gpu/drm

  KernelCommandLine=plymouth.use-simpledrm
    </screen>
    </example>
    <example>
    <title>mkosi Project config (<filename>prjconf</filename>)</title>
    <screen>
  %if "%_repository" == "Debian_Testing_images"
  Type: mkosi
  Repotype: checksumsfile:rawsig staticlinks
  Patterntype: none
  %endif
    </screen>
    </example>
    <example>
    <title>mkosi Project meta example</title>
    <screen>
  &lt;project name="Your:Project:Name"&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;description&gt;Description&lt;/description&gt;
    &lt;repository name="suse"&gt;
      &lt;path project="Debian:Testing" repository="standard"/&gt;
      &lt;path project="Debian:Testing" repository="non-free-firmware"/&gt;
      &lt;arch&gt;x86_64&lt;/arch&gt;
    &lt;/repository&gt;
  &lt;/project&gt;
    </screen>
    </example>
  </sect2>

  <sect2 xml:id="sec-pkgfmt-mkosi-git">
    <title>Full Discoverable Disk Image from git</title>
    <para>
    In order to build a more complex project, with multiple configuration files,
    it is possible to use a git repository via
    <link xlink:href="https://github.com/openSUSE/obs-service-tar_scm#obs_scm">obs-service-tar_scm.</link>
    OBS needs a single config file to be extracted, to resolve, download and
    and preseed dependencies, so make sure one of the config files in the repository
    lists all required dependencies for the build. It can be a hidden file that mkosi
    itself doesn't use, in case that is desired. See the
    <link xlink:href="https://github.com/systemd/particleos">ParticleOS</link>
    repository for a real world example.
    </para>
    <example>
    <title>mkosi _service file to build image from git</title>
    <screen>
&lt;services&gt;
  &lt;service name="obs_scm"&gt;
    &lt;param name="scm"&gt;git&lt;/param&gt;
    &lt;param name="url"&gt;https://github.com/systemd/particleos.git&lt;/param&gt;
    &lt;param name="revision"&gt;obs&lt;/param&gt;
    &lt;param name="extract"&gt;.obs/debian/x86-64/gnome/mkosi.conf&lt;/param&gt;
    &lt;param name="without-version"&gt;1&lt;param&gt;
  &lt;/service&gt;
&lt;/services&gt;
    </screen>
    </example>
  </sect2>
 </sect1>
</chapter>
